name: Continuous Integration and Delivery / Deployment
# do not trigger workflow on change to readme.md only.
on: 
  pull_request:
    types: [opened]
    paths-ignore:
      - 'README.md'
  push:
    paths-ignore:
      - 'README.md'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python (for pip-audit)
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build Docker image (test stage)
        run: docker build --target test --tag portalapi:test .

      - name: Install and run pip-audit inside the container using Poetry
        run: |
          docker run --rm --entrypoint "" portalapi:test poetry run pip install "pip>=23.3,<24.0"
          docker run --rm --entrypoint "" portalapi:test poetry add --group dev pip-audit
          docker run --rm --entrypoint "" portalapi:test poetry run python -m pip_audit
          docker run --rm --entrypoint "" -e PIPAPI_PYTHON_LOCATION=/app/.venv/bin/python portalapi:test poetry run pip-audit
            
      
      - name: Trivy image scan (fail on critical/high)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'portalapi:test'
          format: 'table'
          exit-code: '1'                  # Fail the build on findings
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

 #     - name: Lint Dockerfile with Hadolint
 #       uses: hadolint/hadolint-action@v3.1.0
 #       with:
 #         dockerfile: Dockerfile

      - name: Run container tests
        run: docker run portalapi:test

  publish:
      name: Publish
      runs-on: ubuntu-latest
      needs: build
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      steps:
        - run: echo Publishing to Azure!
        -
          name: Login to Azure Container Portal
# Login to ACR using Admin account and access token stored within ACR.
# Secrets stored within Github Actions Secrets repository.`
          uses: azure/docker-login@v2
          with:
              login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
              username: ${{ secrets.REGISTRY_USERNAME }}
              password: ${{ secrets.REGISTRY_PASSWORD }}     
        -
          name: Build and Push Production to Azure Container Portal
          uses: actions/checkout@v4
        - run: docker build --target production --tag portalapicontainer.azurecr.io/portalapi:${{ github.sha }} .
        - run: docker push portalapicontainer.azurecr.io/portalapi:${{ github.sha }}
# Trigger Terraform to build Azure IaC. 
        - run: echo Terraform to build Azure Iac
        - name: Azure login
          uses: azure/login@v2
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}


# Create Azure Iac via Terraform
        -
          name: Terraform
          uses: hashicorp/setup-terraform@v3
        - run: terraform init
        - run: terraform apply -auto-approve -lock=false
          env:
            TF_VAR_SERVICE_PRINCIPLE_CLIENT_SECRET: ${{ secrets.TF_VAR_SERVICE_PRINCIPLE_CLIENT_SECRET }}
            TF_VAR_DOCKER_SERVER_USR: ${{ secrets.TF_VAR_DOCKER_SERVER_USR }}
            TF_VAR_DOCKER_SERVER_PWD: ${{ secrets.TF_VAR_DOCKER_SERVER_PWD }}
            TF_VAR_MONGODBASE_CONN_STRING: ${{ secrets.TF_VAR_MONGODBASE_CONN_STRING }}
            TF_VAR_MONGODBASE: ${{ secrets.TF_VAR_MONGODBASE }}
            TF_VAR_FLASK_APP: ${{ secrets.TF_VAR_FLASK_APP }}
            TF_VAR_FLASK_DEBUG: ${{ secrets.TF_VAR_FLASK_DEBUG }}
            TF_VAR_SECRET_KEY: ${{ secrets.TF_VAR_SECRET_KEY }}
            TF_VAR_WEBSITES_PORT: ${{ secrets.TF_VAR_WEBSITES_PORT }}
            TF_VAR_GITHUB_OAUTH_CLIENT_ID: ${{ secrets.TF_VAR_GITHUB_OAUTH_CLIENT_ID }}
            TF_VAR_GITHUB_OAUTH_CLIENT_SECRET: ${{ secrets.TF_VAR_GITHUB_OAUTH_CLIENT_SECRET }}
            TF_VAR_TRELLO_API_KEY: ${{ secrets.TF_VAR_TRELLO_API_KEY }}
            TF_VAR_TRELLO_API_TOKEN: ${{ secrets.TF_VAR_TRELLO_API_TOKEN }}
            TF_VAR_TRELLO_API_SECRET: ${{ secrets.TF_VAR_TRELLO_API_SECRET }}
            TF_VAR_TRELLO_TODO_LIST_ID: ${{ secrets.TF_VAR_TRELLO_TODO_LIST_ID }}
        - run: curl -dH -X POST "$(terraform output -raw webhook_url)"


# Login and Deploy to Azure Kubernetes Cluster
        - name: Set AKS context
          id: set-context
          uses: azure/aks-set-context@v3
          with:
            resource-group: 'PortalApi' 
            cluster-name: 'portalapiAKSCluster'
        - name: Setup kubectl
          id: install-kubectl
          uses: azure/setup-kubectl@v3

        - name: Deploy to AKS
          id: deploy-aks
          uses: Azure/k8s-deploy@v4
          with:
            namespace: 'default'
            manifests: |
                AKS-Deployment.yaml
                AKS-Service.yaml
            images: 'portalapicontainer.azurecr.io/portalapi:${{ github.sha }}'
#          - name: Force restart deployment
#            run: kubectl rollout restart deployment portalapiAKSCluster -n default




